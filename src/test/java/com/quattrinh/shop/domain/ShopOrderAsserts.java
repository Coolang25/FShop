package com.quattrinh.shop.domain;

import static com.quattrinh.shop.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ShopOrderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopOrderAllPropertiesEquals(ShopOrder expected, ShopOrder actual) {
        assertShopOrderAutoGeneratedPropertiesEquals(expected, actual);
        assertShopOrderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopOrderAllUpdatablePropertiesEquals(ShopOrder expected, ShopOrder actual) {
        assertShopOrderUpdatableFieldsEquals(expected, actual);
        assertShopOrderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopOrderAutoGeneratedPropertiesEquals(ShopOrder expected, ShopOrder actual) {
        assertThat(expected)
            .as("Verify ShopOrder auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopOrderUpdatableFieldsEquals(ShopOrder expected, ShopOrder actual) {
        assertThat(expected)
            .as("Verify ShopOrder relevant properties")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getTotal()).as("check total").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTotal()))
            .satisfies(e -> assertThat(e.getShippingAddress()).as("check shippingAddress").isEqualTo(actual.getShippingAddress()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShopOrderUpdatableRelationshipsEquals(ShopOrder expected, ShopOrder actual) {
        // empty method
    }
}
