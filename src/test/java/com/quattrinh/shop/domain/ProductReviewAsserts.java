package com.quattrinh.shop.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductReviewAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductReviewAllPropertiesEquals(ProductReview expected, ProductReview actual) {
        assertProductReviewAutoGeneratedPropertiesEquals(expected, actual);
        assertProductReviewAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductReviewAllUpdatablePropertiesEquals(ProductReview expected, ProductReview actual) {
        assertProductReviewUpdatableFieldsEquals(expected, actual);
        assertProductReviewUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductReviewAutoGeneratedPropertiesEquals(ProductReview expected, ProductReview actual) {
        assertThat(expected)
            .as("Verify ProductReview auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductReviewUpdatableFieldsEquals(ProductReview expected, ProductReview actual) {
        assertThat(expected)
            .as("Verify ProductReview relevant properties")
            .satisfies(e -> assertThat(e.getRating()).as("check rating").isEqualTo(actual.getRating()))
            .satisfies(e -> assertThat(e.getComment()).as("check comment").isEqualTo(actual.getComment()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductReviewUpdatableRelationshipsEquals(ProductReview expected, ProductReview actual) {
        assertThat(expected)
            .as("Verify ProductReview relationships")
            .satisfies(e -> assertThat(e.getProduct()).as("check product").isEqualTo(actual.getProduct()));
    }
}
